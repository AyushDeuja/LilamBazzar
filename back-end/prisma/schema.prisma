generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  name          String         @db.VarChar(191)
  email         String         @unique @db.VarChar(191)
  mobile        String         @unique @db.VarChar(15)
  password      String         @db.VarChar(191)
  role_id       Int            @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  Cart          Cart[]
  organizations organizations?
  Purchase      Purchase[]
  Sale          Sale[]
  roles         roles          @relation(fields: [role_id], references: [id])

  @@map("users")
}

model Category {
  id            Int       @id @default(autoincrement())
  category_name String    @db.VarChar(191)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  products      Product[]

  @@map("categories")
}

model Product {
  id              Int           @id @default(autoincrement())
  product_name    String        @db.VarChar(191)
  price           Decimal       @db.Decimal(10, 2)
  stock           Int           @default(0)
  description     String?       @db.VarChar(191)
  category_id     Int
  organization_id Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  Cart            Cart[]
  category        Category      @relation(fields: [category_id], references: [id])
  user            organizations @relation(fields: [organization_id], references: [id])
  Purchase        Purchase[]
  sales           Sale[]

  @@map("products")
}

model Sale {
  id              Int           @id @default(autoincrement())
  user_id         Int
  product_id      Int
  organization_id Int
  quantity        Int
  total           Decimal       @db.Decimal(10, 2)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  organizations   organizations @relation(fields: [organization_id], references: [id])
  product         Product       @relation(fields: [product_id], references: [id])
  user            User          @relation(fields: [user_id], references: [id])

  @@map("sales")
}

model Purchase {
  id              Int           @id @default(autoincrement())
  user_id         Int
  product_id      Int
  organization_id Int
  quantity        Int
  const_price     Decimal       @db.Decimal(10, 2)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  organizations   organizations @relation(fields: [organization_id], references: [id])
  product         Product       @relation(fields: [product_id], references: [id])
  user            User          @relation(fields: [user_id], references: [id])

  @@map("purchases")
}

model Cart {
  id         Int      @id @default(autoincrement())
  user_id    Int
  product_id Int
  quantity   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product    Product  @relation(fields: [product_id], references: [id])
  user       User     @relation(fields: [user_id], references: [id])

  @@map("carts")
}

model organizations {
  id                Int        @id @default(autoincrement())
  organization_name String     @db.VarChar(191)
  pan_no            String     @unique @db.VarChar(191)
  user_id           Int        @unique
  createdAt         DateTime   @default(now())
  updatedAt         DateTime
  users             User       @relation(fields: [user_id], references: [id])
  Product           Product[]
  purchases         Purchase[]
  sales             Sale[]
}

model roles {
  id        Int      @id @default(autoincrement())
  role_name roleType
  users     User?
}

enum roleType {
  admin
  vendor
  customer
}
