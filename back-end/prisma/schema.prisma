// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum roleType {
  admin    @map("0")
  vendor   @map("1")
  customer @map("2")
}

model User {
  id                Int      @id @default(autoincrement())
  name              String   @db.VarChar(191)
  email             String   @unique @db.VarChar(191)
  mobile            String   @unique @db.VarChar(15)
  password          String   @db.VarChar(191)
  user_role         roleType @default(customer)
  //If vendor then
  organization_name String?  @db.VarChar(191)
  pan_no            String?  @unique @db.VarChar(191)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  Sale     Sale[]
  Purchase Purchase[]
  Cart     Cart[]
  Product  Product[]
  Bid      Bid[]
  Order    Order[]

  @@map("users")
}

model Category {
  id            Int      @id @default(autoincrement())
  category_name String   @db.VarChar(191)
  description   String?  @db.VarChar(191)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  products Product[]

  @@map("categories")
}

model Product {
  id              Int      @id @default(autoincrement())
  product_name    String   @db.VarChar(191)
  base_price      Decimal  @db.Decimal(10, 2) //for bidding
  description     String?  @db.VarChar(191)
  stock           Int      @default(0)
  category_id     Int
  organization_id Int // should be vendor
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  category Category @relation(fields: [category_id], references: [id])
  user     User     @relation(fields: [organization_id], references: [id])

  sales        Sale[]
  Purchase     Purchase[]
  Cart         Cart[]
  Bid          Bid[]
  OrderHasItem OrderHasItem[]

  @@map("products")
}

model Bid {
  id         Int      @id @default(autoincrement())
  product_id Int
  bidder_id  Int //should be customer
  bid_price  Decimal  @db.Decimal(10, 2)
  is_winner  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user    User    @relation(fields: [bidder_id], references: [id])
  product Product @relation(fields: [product_id], references: [id])
  Order   Order[]

  @@map("bids")
}

model Sale {
  id         Int      @id @default(autoincrement())
  user_id    Int
  product_id Int
  quantity   Int
  total      Decimal  @db.Decimal(10, 2)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user    User    @relation(fields: [user_id], references: [id])
  product Product @relation(fields: [product_id], references: [id])

  @@map("sales")
}

model Purchase {
  id          Int      @id @default(autoincrement())
  user_id     Int
  product_id  Int
  quantity    Int
  const_price Decimal  @db.Decimal(10, 2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user    User    @relation(fields: [user_id], references: [id])
  product Product @relation(fields: [product_id], references: [id])

  @@map("purchases")
}

model Cart {
  id         Int      @id @default(autoincrement())
  user_id    Int
  product_id Int
  quantity   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user    User    @relation(fields: [user_id], references: [id])
  product Product @relation(fields: [product_id], references: [id])

  @@map("carts")
}

model Order {
  id            Int      @id @default(autoincrement())
  order_no      Int
  total_amount  Int
  is_delivered  Boolean  @default(false)
  has_confirmed Boolean  @default(false)
  is_paid       Boolean  @default(false)
  order_by      Int
  bid_id        Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user         User           @relation(fields: [order_by], references: [id])
  bid          Bid            @relation(fields: [bid_id], references: [id])
  OrderHasItem OrderHasItem[]

  @@map("orders")
}

model OrderHasItem {
  id            Int      @id @default(autoincrement())
  product_id    Int
  order_id      Int
  product_price Decimal  @db.Decimal(10, 2)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  order   Order   @relation(fields: [order_id], references: [id])
  product Product @relation(fields: [product_id], references: [id])

  @@map("order_has_items")
}
